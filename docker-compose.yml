services:
  ## ---------------------------------
  ##  1. INFRASTRUCTURE SERVICES
  ## ---------------------------------
  mysql:
    image: mysql:latest
    container_name: auctiondb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Ensure this is in your .env file
    ports: ["3306:3306"] # Exposes MySQL on localhost:3306
    volumes:
      - ./mysql-init/init.sql:/docker-entrypoint-initdb.d/init.sql
      ## It's safer to use named volumes or relative paths for data persistence
      ## - mysql-data:/var/lib/mysql
      #- /var/lib/docker/volumes/4489495f60175f8abaed5bc0313e0f272f001f51f7d85c37a34e70cfe6311bd6/_data:/var/lib/mysql
    networks: [app-network]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: auction-redis
    restart: unless-stopped
    ports: ["6379:6379"] # Exposes Redis on localhost:6379
    networks: [app-network]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  rabbitmq:
    build:
      context: ./rabbitmq/plugins
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"    # AMQP port, exposes on localhost:5672
      - "15672:15672" # Management UI, exposes on localhost:15672
    volumes:
      - ./rabbitmq/conf:/etc/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - rabbitmq-data:/var/lib/rabbitmq
    networks: [app-network]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
      interval: 10s
      retries: 5

  keycloak:
    build:
      context: ./keycloak-custom # Path to the directory containing your Dockerfile
      dockerfile: Dockerfile
    container_name: keycloak
    command: start-dev
    restart: unless-stopped
    ports: ["7080:8080"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HEALTH_ENABLED: "true"
    volumes:
      - keycloak-data:/opt/keycloak/data
    networks: [app-network]
    healthcheck:
      # Now this curl command should work
      test: ["CMD", "curl", "-f", "http://localhost:8080/admin/master/console/"] # Or the OIDC endpoint
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 60s

## ---------------------------------
##  2. EUREKA SERVER
## ---------------------------------
  eurekaserver:
    image: hoangquan25/eurekaserver:1.0
    container_name: eurekaserver
    restart: on-failure
    ports: ["8070:8070"]
    networks: [app-network]
    environment:
      SERVER_PORT: 8070
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8070/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  ## ---------------------------------
  ##  3. APPLICATION MICROSERVICES
  ## ---------------------------------
  users:
    image: hoangquan25/users:1.0
    container_name: users # Added for consistency, optional
    restart: on-failure
    networks: [app-network]
    depends_on:
      mysql: { condition: service_healthy }
      eurekaserver: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      keycloak: { condition: service_healthy }
    environment:
      SERVER_PORT: 8001
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/user_schema
      SPRING_DATASOURCE_USERNAME: users_svc_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      KEYCLOAK_AUTH-SERVER-URL: http://keycloak:8080
      #KEYCLOAK_REALM: auction-realm
      #KEYCLOAK_RESOURCE: userservice-admin-client
      #KEYCLOAK_CREDENTIALS_SECRET: ${KEYCLOAK_USER_SERVICE_CLIENT_SECRET} # Use an env var for secrets

  products:
    image: hoangquan25/products:1.0
    container_name: products # Added for consistency, optional
    restart: on-failure
    networks: [app-network]
    depends_on:
      mysql: { condition: service_healthy }
      eurekaserver: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    environment:
      SERVER_PORT: 8002
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/product_schema
      SPRING_DATASOURCE_USERNAME: products_svc_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}

  deliveries:
    image: hoangquan25/deliveries:1.0
    container_name: deliveries # Added for consistency, optional
    restart: on-failure
    networks: [app-network]
    depends_on:
      mysql: { condition: service_healthy }
      eurekaserver: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      SERVER_PORT: 8008
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/delivery_service_schema
      SPRING_DATASOURCE_USERNAME: deliveries_svc_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_REDISSON_SINGLESERVERCONFIG_ADDRESS: "redis://redis:6379"


  notifications:
    image: hoangquan25/notifications:1.0
    container_name: notifications # Added for consistency, optional
    restart: on-failure
    networks: [app-network]
    depends_on:
      mysql: { condition: service_healthy }
      eurekaserver: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      SERVER_PORT: 8005
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/notification_schema
      SPRING_DATASOURCE_USERNAME: notifications_svc_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_REDISSON_SINGLESERVERCONFIG_ADDRESS: "redis://redis:6379"


  liveauctions:
    image: hoangquan25/liveauctions:1.0
    container_name: liveauctions # Added for consistency, optional
    restart: on-failure
    networks: [app-network]
    depends_on:
      mysql: { condition: service_healthy }
      eurekaserver: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      SERVER_PORT: 8003
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/live_auction_schema
      SPRING_DATASOURCE_USERNAME: live_auctions_svc_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_REDISSON_SINGLESERVERCONFIG_ADDRESS: "redis://redis:6379"
      AUCTION_TIMING_SOFT-CLOSE_ENABLED: "true"
      AUCTION_TIMING_SOFT-CLOSE_THRESHOLD-SECONDS: 60
      AUCTION_TIMING_SOFT-CLOSE_EXTENSION-SECONDS: 20
      AUCTION_TIMING_FAST-FINISH_ENABLED: "false" # As per your liveauctions.yml
      AUCTION_TIMING_FAST-FINISH_FAST-FINISH-MINUTES: 2


  timedauctions:
    image: hoangquan25/timedauctions:1.0
    container_name: timedauctions # Added for consistency, optional
    restart: on-failure
    networks: [app-network]
    depends_on:
      mysql: { condition: service_healthy }
      eurekaserver: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      SERVER_PORT: 8004
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/timed_auction_schema
      SPRING_DATASOURCE_USERNAME: timed_auctions_svc_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      ## Note: Your timedauctions.yml uses SPRING_DATA_REDIS_HOST/PORT, not the redisson path directly for address
      ## Ensure your app reads these correctly or adjust if it expects the redisson path like other services.
      ## Assuming it also uses the redisson single server config path like others for consistency:
      SPRING_DATA_REDIS_REDISSON_SINGLESERVERCONFIG_ADDRESS: "redis://redis:6379"
      AUCTION_TIMING_SOFT-CLOSE_ENABLED: "true"
      AUCTION_TIMING_SOFT-CLOSE_THRESHOLD-MINUTES: 10
      AUCTION_TIMING_SOFT-CLOSE_EXTENSION-MINUTES: 5


  orders:
    image: hoangquan25/orders:1.0
    container_name: orders # Added for consistency, optional
    restart: on-failure
    networks: [app-network]
    depends_on:
      mysql: { condition: service_healthy }
      eurekaserver: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      SERVER_PORT: 8006
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_service_schema
      SPRING_DATASOURCE_USERNAME: orders_svc_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_REDISSON_SINGLESERVERCONFIG_ADDRESS: "redis://redis:6379"
      ORDERS-CONFIG_PAYMENT_TIMEOUT_LIVE-AUCTION-WINNER-DURATION: "PT2H"
      ORDERS-CONFIG_PAYMENT_TIMEOUT_TIMED-AUCTION-WINNER-DURATION: "PT24H"
      ORDERS-CONFIG_PAYMENT_TIMEOUT_NEXT-BIDDER-DURATION: "PT24H"

  payments:
    image: hoangquan25/payments:1.0
    container_name: payments # Added for consistency, optional
    restart: on-failure
    networks: [app-network]
    depends_on:
      mysql: { condition: service_healthy }
      eurekaserver: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    environment:
      SERVER_PORT: 8007
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/payment_service_schema
      SPRING_DATASOURCE_USERNAME: payments_svc_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      STRIPE_API_SECRET-KEY: ${STRIPE_SECRET_KEY_TEST}
      STRIPE_WEBHOOK_SIGNING-SECRET: ${STRIPE_WEBHOOK_SIGNING_SECRET_TEST}

  ## ---------------------------------
  ##  4. API GATEWAY & FRONTEND
  ## ---------------------------------
  gatewayserver:
    image: hoangquan25/gatewayserver:1.0
    container_name: gatewayserver
    restart: on-failure
    ports: ["8072:8072"]
    networks: [app-network]
    depends_on:
      eurekaserver: { condition: service_healthy }
      keycloak: { condition: service_healthy }
      users: { condition: service_healthy } # Using service_started as healthchecks might not be configured for all apps
      products: { condition: service_healthy }
      orders: { condition: service_healthy }
      payments: { condition: service_healthy }
      liveauctions: { condition: service_healthy }
      timedauctions: { condition: service_healthy }
      notifications: { condition: service_healthy }
      deliveries: { condition: service_healthy }
    environment:
      SERVER_PORT: 8072
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/auction-realm/protocol/openid-connect/certs"
      SPRING_CLOUD_GATEWAY_HTTPCLIENT_CONNECT-TIMEOUT: 1000
      SPRING_CLOUD_GATEWAY_HTTPCLIENT_RESPONSE-TIMEOUT: 10s
      ## For Resilience4j, ensure your image includes these default configs or set them here if needed.
      ## Example: RESILIENCE4J_CIRCUITBREAKER_CONFIGS_DEFAULT_SLIDINGWINDOWSIZE: 10

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports: ["5173:80"]
    volumes:
      - ./frontend/src:/app/src
    networks: [app-network]
    depends_on: # Frontend depends on gateway being available
      gatewayserver: {condition: service_started} # Assuming gateway has a healthcheck or using service_started

## ---------------------------------
##  NETWORKS & VOLUMES
## ---------------------------------
networks:
  app-network:
    driver: bridge

volumes:
  ## mysql-data: {} # Uncomment if you switch mysql volume to a named volume
  keycloak-data: {}
  rabbitmq-data: {}

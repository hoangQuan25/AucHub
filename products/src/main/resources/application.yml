server:
  port: 8002

spring:
  application:
    name: products
  profiles:
    active: "prod" # Or make this dynamic based on environment
  datasource:
    # === IMPORTANT: Configure MySQL Connection ===
    url: jdbc:mysql://localhost:3306/product_schema
    username: products_svc_user
    password: quan12345656915691
    driverClassName: com.mysql.cj.jdbc.Driver
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect # Use MySQL dialect
    hibernate:
      ddl-auto: update # 'update' for dev, 'validate' or 'none' for prod (use migrations)
    show-sql: true # Useful for dev, disable in prod
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost} # Use environment variable or default to localhost
    port: 5672
    username: hoangquan
    password: quan5691
    listener:
      simple:
        missing-queues-fatal: false
  # === OAUTH2 Resource Server config (for validating tokens IF service needs to call others) ===
  # If User Service ONLY receives calls from Gateway (which validates), this might not be strictly needed
  # But good practice to include if it might call other protected services later.
  # security:
  #   oauth2:
  #     resourceserver:
  #       jwt:
  #         jwk-set-uri: "http://localhost:7080/realms/auction-realm/protocol/openid-connect/certs" # Point to Keycloak JWKS

management: # Standard Actuator/Monitoring config
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

eureka: # Standard Eureka client config
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://${HOSTNAME}:8070/eureka/ # Point to your Eureka Server

logging: # Standard Logging config
  level:
    com: # Replace 'com.example' with your actual base package
      example:
        userservice: DEBUG
  pattern:
    level: "%5p [${spring.application.name}, %X{trace_id}, %X{span_id}]"

info: # Custom app info
  app:
    name: "User Service"
    description: "Auction Platform User Service"
    version: "1.0.0"
